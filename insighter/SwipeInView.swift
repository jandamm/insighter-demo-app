//
// SwipeInView.swift
// Generated by Core Animator version 1.3.2 on 30.09.16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class SwipeInPassthroughView: UIView {

	override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
		for subview in subviews as [UIView] {
			if subview.point(inside: convert(point, to: subview), with: event) { return true }
		}
		return false
	}
}

@IBDesignable
class SwipeInView: UIView, CAAnimationDelegate {

	var animationCompletions = Dictionary < CAAnimation, (Bool) -> Void > ()
	var viewsByName: [String: UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 2, height: 2))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x: self.bounds.midX, y: self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String: UIView] = [:]
		let bundle = Bundle(for: type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x: 0, y: 0, width: 2, height: 2)
		__scaling__.center = CGPoint(x: 1.0, y: 1.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let swipeInCircle__root = SwipeInPassthroughView()
		let swipeInCircle__xScale = SwipeInPassthroughView()
		let swipeInCircle__yScale = SwipeInPassthroughView()
		let swipeInCircle = UIImageView()
		let imgSwipeInCircle = UIImage(named: "swipe-in-circle.png", in: bundle, compatibleWith: nil)
		if imgSwipeInCircle == nil {
			print("** Warning: Could not create image from 'swipe-in-circle.png'")
		}
		swipeInCircle.image = imgSwipeInCircle
		swipeInCircle.contentMode = .center
		swipeInCircle.bounds = CGRect(x: 0, y: 0, width: 250.0, height: 250.0)
		swipeInCircle__root.layer.position = CGPoint(x: 127.827, y: 1.346)
		swipeInCircle__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		swipeInCircle__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 2.20)
		swipeInCircle__root.transform = CGAffineTransform(rotationAngle: 6.281)
		__scaling__.addSubview(swipeInCircle__root)
		swipeInCircle__root.addSubview(swipeInCircle__xScale)
		swipeInCircle__xScale.addSubview(swipeInCircle__yScale)
		swipeInCircle__yScale.addSubview(swipeInCircle)
		__scaling__.addSubview(swipeInCircle__root)
		viewsByName["swipe-in-circle__root"] = swipeInCircle__root
		viewsByName["swipe-in-circle__xScale"] = swipeInCircle__xScale
		viewsByName["swipe-in-circle__yScale"] = swipeInCircle__yScale
		viewsByName["swipe-in-circle"] = swipeInCircle

		let swipeInArrow__root = SwipeInPassthroughView()
		let swipeInArrow__xScale = SwipeInPassthroughView()
		let swipeInArrow__yScale = SwipeInPassthroughView()
		let swipeInArrow = UIImageView()
		let imgSwipeInArrow = UIImage(named: "swipe-in-arrow.png", in: bundle, compatibleWith: nil)
		if imgSwipeInArrow == nil {
			print("** Warning: Could not create image from 'swipe-in-arrow.png'")
		}
		swipeInArrow.image = imgSwipeInArrow
		swipeInArrow.contentMode = .center
		swipeInArrow.bounds = CGRect(x: 0, y: 0, width: 30.0, height: 72.0)
		swipeInArrow__root.layer.position = CGPoint(x: 17.827, y: 1.346)
		swipeInArrow__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		swipeInArrow__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		swipeInArrow__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(swipeInArrow__root)
		swipeInArrow__root.addSubview(swipeInArrow__xScale)
		swipeInArrow__xScale.addSubview(swipeInArrow__yScale)
		swipeInArrow__yScale.addSubview(swipeInArrow)
		__scaling__.addSubview(swipeInArrow__root)
		viewsByName["swipe-in-arrow__root"] = swipeInArrow__root
		viewsByName["swipe-in-arrow__xScale"] = swipeInArrow__xScale
		viewsByName["swipe-in-arrow__yScale"] = swipeInArrow__yScale
		viewsByName["swipe-in-arrow"] = swipeInArrow

		self.viewsByName = viewsByName
	}

	// - MARK: Swipe To Next Page

	func addSwipeToNextPageAnimation() {
		addSwipeToNextPageAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addSwipeToNextPageAnimation(completion: ((Bool) -> Void)?) {
		addSwipeToNextPageAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addSwipeToNextPageAnimation(removedOnCompletion: Bool) {
		addSwipeToNextPageAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addSwipeToNextPageAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSwipeToNextPageAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addSwipeToNextPageAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "SwipeToNextPage")
			self.animationCompletions[layer.animation(forKey: "SwipeToNextPage")!] = complete
		}

		let swipeInArrowOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		swipeInArrowOpacityAnimation.duration = 1.000
		swipeInArrowOpacityAnimation.values = [1.000, 0.850, 0.850, 0.000] as [Float]
		swipeInArrowOpacityAnimation.keyTimes = [0.000, 0.375, 0.750, 1.000] as [NSNumber]
		swipeInArrowOpacityAnimation.timingFunctions = [easeInTiming, linearTiming, easeOutTiming]
		swipeInArrowOpacityAnimation.beginTime = beginTime
		swipeInArrowOpacityAnimation.fillMode = fillMode
		swipeInArrowOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["swipe-in-arrow__root"]?.layer.add(swipeInArrowOpacityAnimation, forKey: "Swipe To Next Page_Opacity")

		let swipeInArrowTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		swipeInArrowTranslationXAnimation.duration = 1.000
		swipeInArrowTranslationXAnimation.values = [0.000, -100.000] as [Float]
		swipeInArrowTranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		swipeInArrowTranslationXAnimation.timingFunctions = [easeOutTiming]
		swipeInArrowTranslationXAnimation.beginTime = beginTime
		swipeInArrowTranslationXAnimation.fillMode = fillMode
		swipeInArrowTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["swipe-in-arrow__root"]?.layer.add(swipeInArrowTranslationXAnimation, forKey: "Swipe To Next Page_TranslationX")

		let swipeInCircleOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		swipeInCircleOpacityAnimation.duration = 1.000
		swipeInCircleOpacityAnimation.values = [1.000, 0.650, 0.650, 0.000] as [Float]
		swipeInCircleOpacityAnimation.keyTimes = [0.000, 0.375, 0.750, 1.000] as [NSNumber]
		swipeInCircleOpacityAnimation.timingFunctions = [easeInTiming, linearTiming, easeOutTiming]
		swipeInCircleOpacityAnimation.beginTime = beginTime
		swipeInCircleOpacityAnimation.fillMode = fillMode
		swipeInCircleOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["swipe-in-circle__root"]?.layer.add(swipeInCircleOpacityAnimation, forKey: "Swipe To Next Page_Opacity")

		let swipeInCircleScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		swipeInCircleScaleYAnimation.duration = 1.000
		swipeInCircleScaleYAnimation.values = [1.500, 1.500] as [Float]
		swipeInCircleScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		swipeInCircleScaleYAnimation.timingFunctions = [linearTiming]
		swipeInCircleScaleYAnimation.beginTime = beginTime
		swipeInCircleScaleYAnimation.fillMode = fillMode
		swipeInCircleScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["swipe-in-circle__yScale"]?.layer.add(swipeInCircleScaleYAnimation, forKey: "Swipe To Next Page_ScaleY")

		let swipeInCircleTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		swipeInCircleTranslationXAnimation.duration = 1.000
		swipeInCircleTranslationXAnimation.values = [0.000, -50.000] as [Float]
		swipeInCircleTranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		swipeInCircleTranslationXAnimation.timingFunctions = [easeOutTiming]
		swipeInCircleTranslationXAnimation.beginTime = beginTime
		swipeInCircleTranslationXAnimation.fillMode = fillMode
		swipeInCircleTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["swipe-in-circle__root"]?.layer.add(swipeInCircleTranslationXAnimation, forKey: "Swipe To Next Page_TranslationX")
	}

	func removeSwipeToNextPageAnimation() {
		self.layer.removeAnimation(forKey: "SwipeToNextPage")
		self.viewsByName["swipe-in-arrow__root"]?.layer.removeAnimation(forKey: "Swipe To Next Page_Opacity")
		self.viewsByName["swipe-in-arrow__root"]?.layer.removeAnimation(forKey: "Swipe To Next Page_TranslationX")
		self.viewsByName["swipe-in-circle__root"]?.layer.removeAnimation(forKey: "Swipe To Next Page_Opacity")
		self.viewsByName["swipe-in-circle__yScale"]?.layer.removeAnimation(forKey: "Swipe To Next Page_ScaleY")
		self.viewsByName["swipe-in-circle__root"]?.layer.removeAnimation(forKey: "Swipe To Next Page_TranslationX")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "SwipeToNextPage")
	}
}
