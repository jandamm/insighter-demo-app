//
// IntroAnimationView.swift
// Generated by Core Animator version 1.3.2 on 02.10.16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class IntroAnimationPassthroughView: UIView {

	override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
		for subview in subviews as [UIView] {
			if subview.point(inside: convert(point, to: subview), with: event) { return true }
		}
		return false
	}
}

@IBDesignable
class IntroAnimationView: UIView, CAAnimationDelegate {

	var animationCompletions = Dictionary < CAAnimation, (Bool) -> Void > ()
	var viewsByName: [String: UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 280, height: 280))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x: self.bounds.midX, y: self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String: UIView] = [:]
		let bundle = Bundle(for: type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x: 0, y: 0, width: 280, height: 280)
		__scaling__.center = CGPoint(x: 140.0, y: 140.0)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let introAnimationLogo__root = IntroAnimationPassthroughView()
		let introAnimationLogo__xScale = IntroAnimationPassthroughView()
		let introAnimationLogo__yScale = IntroAnimationPassthroughView()
		let introAnimationLogo = UIImageView()
		let imgIntroAnimationLogo = UIImage(named: "intro-animation-logo.png", in: bundle, compatibleWith: nil)
		if imgIntroAnimationLogo == nil {
			print("** Warning: Could not create image from 'intro-animation-logo.png'")
		}
		introAnimationLogo.image = imgIntroAnimationLogo
		introAnimationLogo.contentMode = .center
		introAnimationLogo.bounds = CGRect(x: 0, y: 0, width: 280.0, height: 70.0)
		introAnimationLogo__root.layer.position = CGPoint(x: 140.000, y: 105.000)
		introAnimationLogo__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationLogo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationLogo__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(introAnimationLogo__root)
		introAnimationLogo__root.addSubview(introAnimationLogo__xScale)
		introAnimationLogo__xScale.addSubview(introAnimationLogo__yScale)
		introAnimationLogo__yScale.addSubview(introAnimationLogo)
		__scaling__.addSubview(introAnimationLogo__root)
		viewsByName["intro-animation-logo__root"] = introAnimationLogo__root
		viewsByName["intro-animation-logo__xScale"] = introAnimationLogo__xScale
		viewsByName["intro-animation-logo__yScale"] = introAnimationLogo__yScale
		viewsByName["intro-animation-logo"] = introAnimationLogo

		let introAnimationDot1__root = IntroAnimationPassthroughView()
		let introAnimationDot1__xScale = IntroAnimationPassthroughView()
		let introAnimationDot1__yScale = IntroAnimationPassthroughView()
		let introAnimationDot1 = UIImageView()
		let imgIntroAnimationDot = UIImage(named: "intro-animation-dot.png", in: bundle, compatibleWith: nil)
		if imgIntroAnimationDot == nil {
			print("** Warning: Could not create image from 'intro-animation-dot.png'")
		}
		introAnimationDot1.image = imgIntroAnimationDot
		introAnimationDot1.contentMode = .center
		introAnimationDot1.bounds = CGRect(x: 0, y: 0, width: 7.0, height: 7.0)
		introAnimationDot1__root.layer.position = CGPoint(x: 132.000, y: 183.000)
		introAnimationDot1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(introAnimationDot1__root)
		introAnimationDot1__root.addSubview(introAnimationDot1__xScale)
		introAnimationDot1__xScale.addSubview(introAnimationDot1__yScale)
		introAnimationDot1__yScale.addSubview(introAnimationDot1)
		__scaling__.addSubview(introAnimationDot1__root)
		viewsByName["intro-animation-dot-1__root"] = introAnimationDot1__root
		viewsByName["intro-animation-dot-1__xScale"] = introAnimationDot1__xScale
		viewsByName["intro-animation-dot-1__yScale"] = introAnimationDot1__yScale
		viewsByName["intro-animation-dot-1"] = introAnimationDot1

		let introAnimationDot2__root = IntroAnimationPassthroughView()
		let introAnimationDot2__xScale = IntroAnimationPassthroughView()
		let introAnimationDot2__yScale = IntroAnimationPassthroughView()
		let introAnimationDot2 = UIImageView()
		introAnimationDot2.image = imgIntroAnimationDot
		introAnimationDot2.contentMode = .center
		introAnimationDot2.bounds = CGRect(x: 0, y: 0, width: 7.0, height: 7.0)
		introAnimationDot2__root.layer.position = CGPoint(x: 132.000, y: 167.000)
		introAnimationDot2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(introAnimationDot2__root)
		introAnimationDot2__root.addSubview(introAnimationDot2__xScale)
		introAnimationDot2__xScale.addSubview(introAnimationDot2__yScale)
		introAnimationDot2__yScale.addSubview(introAnimationDot2)
		__scaling__.addSubview(introAnimationDot2__root)
		viewsByName["intro-animation-dot-2__root"] = introAnimationDot2__root
		viewsByName["intro-animation-dot-2__xScale"] = introAnimationDot2__xScale
		viewsByName["intro-animation-dot-2__yScale"] = introAnimationDot2__yScale
		viewsByName["intro-animation-dot-2"] = introAnimationDot2

		let introAnimationDot3__root = IntroAnimationPassthroughView()
		let introAnimationDot3__xScale = IntroAnimationPassthroughView()
		let introAnimationDot3__yScale = IntroAnimationPassthroughView()
		let introAnimationDot3 = UIImageView()
		introAnimationDot3.image = imgIntroAnimationDot
		introAnimationDot3.contentMode = .center
		introAnimationDot3.bounds = CGRect(x: 0, y: 0, width: 7.0, height: 7.0)
		introAnimationDot3__root.layer.position = CGPoint(x: 148.000, y: 183.000)
		introAnimationDot3__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(introAnimationDot3__root)
		introAnimationDot3__root.addSubview(introAnimationDot3__xScale)
		introAnimationDot3__xScale.addSubview(introAnimationDot3__yScale)
		introAnimationDot3__yScale.addSubview(introAnimationDot3)
		__scaling__.addSubview(introAnimationDot3__root)
		viewsByName["intro-animation-dot-3__root"] = introAnimationDot3__root
		viewsByName["intro-animation-dot-3__xScale"] = introAnimationDot3__xScale
		viewsByName["intro-animation-dot-3__yScale"] = introAnimationDot3__yScale
		viewsByName["intro-animation-dot-3"] = introAnimationDot3

		let introAnimationDot4__root = IntroAnimationPassthroughView()
		let introAnimationDot4__xScale = IntroAnimationPassthroughView()
		let introAnimationDot4__yScale = IntroAnimationPassthroughView()
		let introAnimationDot4 = UIImageView()
		introAnimationDot4.image = imgIntroAnimationDot
		introAnimationDot4.contentMode = .center
		introAnimationDot4.bounds = CGRect(x: 0, y: 0, width: 7.0, height: 7.0)
		introAnimationDot4__root.layer.position = CGPoint(x: 148.000, y: 167.000)
		introAnimationDot4__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		introAnimationDot4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(introAnimationDot4__root)
		introAnimationDot4__root.addSubview(introAnimationDot4__xScale)
		introAnimationDot4__xScale.addSubview(introAnimationDot4__yScale)
		introAnimationDot4__yScale.addSubview(introAnimationDot4)
		__scaling__.addSubview(introAnimationDot4__root)
		viewsByName["intro-animation-dot-4__root"] = introAnimationDot4__root
		viewsByName["intro-animation-dot-4__xScale"] = introAnimationDot4__xScale
		viewsByName["intro-animation-dot-4__yScale"] = introAnimationDot4__yScale
		viewsByName["intro-animation-dot-4"] = introAnimationDot4

		self.viewsByName = viewsByName
	}

	// - MARK: introAnimation

	func addIntroAnimation() {
		addIntroAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addIntroAnimation(completion: ((Bool) -> Void)?) {
		addIntroAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addIntroAnimation(removedOnCompletion: Bool) {
		addIntroAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addIntroAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addIntroAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addIntroAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "IntroAnimation")
			self.animationCompletions[layer.animation(forKey: "IntroAnimation")!] = complete
		}

		let introAnimationLogoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationLogoTranslationYAnimation.duration = 0.500
		introAnimationLogoTranslationYAnimation.values = [35.000, 35.000, 0.000] as [Float]
		introAnimationLogoTranslationYAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		introAnimationLogoTranslationYAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationLogoTranslationYAnimation.beginTime = beginTime
		introAnimationLogoTranslationYAnimation.fillMode = fillMode
		introAnimationLogoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-logo__root"]?.layer.add(introAnimationLogoTranslationYAnimation, forKey: "introAnimation_TranslationY")

		let introAnimationDot3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot3ScaleXAnimation.duration = 0.500
		introAnimationDot3ScaleXAnimation.values = [0.880, 0.880, 1.000] as [Float]
		introAnimationDot3ScaleXAnimation.keyTimes = [0.000, 0.320, 1.000] as [NSNumber]
		introAnimationDot3ScaleXAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot3ScaleXAnimation.beginTime = beginTime
		introAnimationDot3ScaleXAnimation.fillMode = fillMode
		introAnimationDot3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__xScale"]?.layer.add(introAnimationDot3ScaleXAnimation, forKey: "introAnimation_ScaleX")

		let introAnimationDot3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot3ScaleYAnimation.duration = 0.500
		introAnimationDot3ScaleYAnimation.values = [0.880, 0.880, 1.000] as [Float]
		introAnimationDot3ScaleYAnimation.keyTimes = [0.000, 0.320, 1.000] as [NSNumber]
		introAnimationDot3ScaleYAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot3ScaleYAnimation.beginTime = beginTime
		introAnimationDot3ScaleYAnimation.fillMode = fillMode
		introAnimationDot3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__yScale"]?.layer.add(introAnimationDot3ScaleYAnimation, forKey: "introAnimation_ScaleY")

		let introAnimationDot3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot3TranslationXAnimation.duration = 0.500
		introAnimationDot3TranslationXAnimation.values = [-90.000, -90.000, 0.000] as [Float]
		introAnimationDot3TranslationXAnimation.keyTimes = [0.000, 0.320, 1.000] as [NSNumber]
		introAnimationDot3TranslationXAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot3TranslationXAnimation.beginTime = beginTime
		introAnimationDot3TranslationXAnimation.fillMode = fillMode
		introAnimationDot3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__root"]?.layer.add(introAnimationDot3TranslationXAnimation, forKey: "introAnimation_TranslationX")

		let introAnimationDot3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot3TranslationYAnimation.duration = 0.500
		introAnimationDot3TranslationYAnimation.values = [-48.000, -48.000, 0.000] as [Float]
		introAnimationDot3TranslationYAnimation.keyTimes = [0.000, 0.320, 1.000] as [NSNumber]
		introAnimationDot3TranslationYAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot3TranslationYAnimation.beginTime = beginTime
		introAnimationDot3TranslationYAnimation.fillMode = fillMode
		introAnimationDot3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__root"]?.layer.add(introAnimationDot3TranslationYAnimation, forKey: "introAnimation_TranslationY")

		let introAnimationDot4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot4ScaleXAnimation.duration = 0.500
		introAnimationDot4ScaleXAnimation.values = [0.880, 0.880, 1.000] as [Float]
		introAnimationDot4ScaleXAnimation.keyTimes = [0.000, 0.340, 1.000] as [NSNumber]
		introAnimationDot4ScaleXAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot4ScaleXAnimation.beginTime = beginTime
		introAnimationDot4ScaleXAnimation.fillMode = fillMode
		introAnimationDot4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__xScale"]?.layer.add(introAnimationDot4ScaleXAnimation, forKey: "introAnimation_ScaleX")

		let introAnimationDot4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot4ScaleYAnimation.duration = 0.500
		introAnimationDot4ScaleYAnimation.values = [0.880, 0.880, 1.000] as [Float]
		introAnimationDot4ScaleYAnimation.keyTimes = [0.000, 0.340, 1.000] as [NSNumber]
		introAnimationDot4ScaleYAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot4ScaleYAnimation.beginTime = beginTime
		introAnimationDot4ScaleYAnimation.fillMode = fillMode
		introAnimationDot4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__yScale"]?.layer.add(introAnimationDot4ScaleYAnimation, forKey: "introAnimation_ScaleY")

		let introAnimationDot4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot4TranslationXAnimation.duration = 0.500
		introAnimationDot4TranslationXAnimation.values = [-78.000, -78.000, 0.000] as [Float]
		introAnimationDot4TranslationXAnimation.keyTimes = [0.000, 0.340, 1.000] as [NSNumber]
		introAnimationDot4TranslationXAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot4TranslationXAnimation.beginTime = beginTime
		introAnimationDot4TranslationXAnimation.fillMode = fillMode
		introAnimationDot4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__root"]?.layer.add(introAnimationDot4TranslationXAnimation, forKey: "introAnimation_TranslationX")

		let introAnimationDot4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot4TranslationYAnimation.duration = 0.500
		introAnimationDot4TranslationYAnimation.values = [-32.000, -32.000, 0.000] as [Float]
		introAnimationDot4TranslationYAnimation.keyTimes = [0.000, 0.340, 1.000] as [NSNumber]
		introAnimationDot4TranslationYAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot4TranslationYAnimation.beginTime = beginTime
		introAnimationDot4TranslationYAnimation.fillMode = fillMode
		introAnimationDot4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__root"]?.layer.add(introAnimationDot4TranslationYAnimation, forKey: "introAnimation_TranslationY")

		let introAnimationDot1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot1ScaleXAnimation.duration = 0.500
		introAnimationDot1ScaleXAnimation.values = [0.750, 0.750, 1.000] as [Float]
		introAnimationDot1ScaleXAnimation.keyTimes = [0.000, 0.200, 1.000] as [NSNumber]
		introAnimationDot1ScaleXAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot1ScaleXAnimation.beginTime = beginTime
		introAnimationDot1ScaleXAnimation.fillMode = fillMode
		introAnimationDot1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__xScale"]?.layer.add(introAnimationDot1ScaleXAnimation, forKey: "introAnimation_ScaleX")

		let introAnimationDot1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot1ScaleYAnimation.duration = 0.500
		introAnimationDot1ScaleYAnimation.values = [0.750, 0.750, 1.000] as [Float]
		introAnimationDot1ScaleYAnimation.keyTimes = [0.000, 0.200, 1.000] as [NSNumber]
		introAnimationDot1ScaleYAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot1ScaleYAnimation.beginTime = beginTime
		introAnimationDot1ScaleYAnimation.fillMode = fillMode
		introAnimationDot1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__yScale"]?.layer.add(introAnimationDot1ScaleYAnimation, forKey: "introAnimation_ScaleY")

		let introAnimationDot1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot1TranslationXAnimation.duration = 0.500
		introAnimationDot1TranslationXAnimation.values = [-111.000, -111.000, 0.000] as [Float]
		introAnimationDot1TranslationXAnimation.keyTimes = [0.000, 0.200, 1.000] as [NSNumber]
		introAnimationDot1TranslationXAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot1TranslationXAnimation.beginTime = beginTime
		introAnimationDot1TranslationXAnimation.fillMode = fillMode
		introAnimationDot1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__root"]?.layer.add(introAnimationDot1TranslationXAnimation, forKey: "introAnimation_TranslationX")

		let introAnimationDot1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot1TranslationYAnimation.duration = 0.500
		introAnimationDot1TranslationYAnimation.values = [-48.000, -48.000, 0.000] as [Float]
		introAnimationDot1TranslationYAnimation.keyTimes = [0.000, 0.200, 1.000] as [NSNumber]
		introAnimationDot1TranslationYAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot1TranslationYAnimation.beginTime = beginTime
		introAnimationDot1TranslationYAnimation.fillMode = fillMode
		introAnimationDot1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__root"]?.layer.add(introAnimationDot1TranslationYAnimation, forKey: "introAnimation_TranslationY")

		let introAnimationDot2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot2ScaleXAnimation.duration = 0.500
		introAnimationDot2ScaleXAnimation.values = [0.750, 0.750, 1.000] as [Float]
		introAnimationDot2ScaleXAnimation.keyTimes = [0.000, 0.220, 1.000] as [NSNumber]
		introAnimationDot2ScaleXAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot2ScaleXAnimation.beginTime = beginTime
		introAnimationDot2ScaleXAnimation.fillMode = fillMode
		introAnimationDot2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__xScale"]?.layer.add(introAnimationDot2ScaleXAnimation, forKey: "introAnimation_ScaleX")

		let introAnimationDot2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot2ScaleYAnimation.duration = 0.500
		introAnimationDot2ScaleYAnimation.values = [0.750, 0.750, 1.000] as [Float]
		introAnimationDot2ScaleYAnimation.keyTimes = [0.000, 0.220, 1.000] as [NSNumber]
		introAnimationDot2ScaleYAnimation.timingFunctions = [linearTiming, easeInTiming]
		introAnimationDot2ScaleYAnimation.beginTime = beginTime
		introAnimationDot2ScaleYAnimation.fillMode = fillMode
		introAnimationDot2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__yScale"]?.layer.add(introAnimationDot2ScaleYAnimation, forKey: "introAnimation_ScaleY")

		let introAnimationDot2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot2TranslationXAnimation.duration = 0.500
		introAnimationDot2TranslationXAnimation.values = [-101.000, -101.000, 0.000] as [Float]
		introAnimationDot2TranslationXAnimation.keyTimes = [0.000, 0.220, 1.000] as [NSNumber]
		introAnimationDot2TranslationXAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot2TranslationXAnimation.beginTime = beginTime
		introAnimationDot2TranslationXAnimation.fillMode = fillMode
		introAnimationDot2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__root"]?.layer.add(introAnimationDot2TranslationXAnimation, forKey: "introAnimation_TranslationX")

		let introAnimationDot2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot2TranslationYAnimation.duration = 0.500
		introAnimationDot2TranslationYAnimation.values = [-32.000, -32.000, 0.000] as [Float]
		introAnimationDot2TranslationYAnimation.keyTimes = [0.000, 0.220, 1.000] as [NSNumber]
		introAnimationDot2TranslationYAnimation.timingFunctions = [linearTiming, easeInOutTiming]
		introAnimationDot2TranslationYAnimation.beginTime = beginTime
		introAnimationDot2TranslationYAnimation.fillMode = fillMode
		introAnimationDot2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__root"]?.layer.add(introAnimationDot2TranslationYAnimation, forKey: "introAnimation_TranslationY")
	}

	func removeIntroAnimation() {
		self.layer.removeAnimation(forKey: "IntroAnimation")
		self.viewsByName["intro-animation-logo__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationY")
		self.viewsByName["intro-animation-dot-3__xScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-3__yScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-3__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationX")
		self.viewsByName["intro-animation-dot-3__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationY")
		self.viewsByName["intro-animation-dot-4__xScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-4__yScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-4__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationX")
		self.viewsByName["intro-animation-dot-4__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationY")
		self.viewsByName["intro-animation-dot-1__xScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-1__yScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-1__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationX")
		self.viewsByName["intro-animation-dot-1__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationY")
		self.viewsByName["intro-animation-dot-2__xScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-2__yScale"]?.layer.removeAnimation(forKey: "introAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-2__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationX")
		self.viewsByName["intro-animation-dot-2__root"]?.layer.removeAnimation(forKey: "introAnimation_TranslationY")
	}

	// - MARK: introView

	func addIntroViewAnimation() {
		addIntroViewAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addIntroViewAnimation(completion: ((Bool) -> Void)?) {
		addIntroViewAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addIntroViewAnimation(removedOnCompletion: Bool) {
		addIntroViewAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addIntroViewAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addIntroViewAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addIntroViewAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "IntroView")
			self.animationCompletions[layer.animation(forKey: "IntroView")!] = complete
		}

		let introAnimationLogoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationLogoTranslationYAnimation.duration = 0.000
		introAnimationLogoTranslationYAnimation.values = [35.000] as [Float]
		introAnimationLogoTranslationYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationLogoTranslationYAnimation.beginTime = beginTime
		introAnimationLogoTranslationYAnimation.fillMode = fillMode
		introAnimationLogoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-logo__root"]?.layer.add(introAnimationLogoTranslationYAnimation, forKey: "introView_TranslationY")

		let introAnimationDot3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot3ScaleXAnimation.duration = 0.000
		introAnimationDot3ScaleXAnimation.values = [0.880] as [Float]
		introAnimationDot3ScaleXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot3ScaleXAnimation.beginTime = beginTime
		introAnimationDot3ScaleXAnimation.fillMode = fillMode
		introAnimationDot3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__xScale"]?.layer.add(introAnimationDot3ScaleXAnimation, forKey: "introView_ScaleX")

		let introAnimationDot3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot3ScaleYAnimation.duration = 0.000
		introAnimationDot3ScaleYAnimation.values = [0.880] as [Float]
		introAnimationDot3ScaleYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot3ScaleYAnimation.beginTime = beginTime
		introAnimationDot3ScaleYAnimation.fillMode = fillMode
		introAnimationDot3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__yScale"]?.layer.add(introAnimationDot3ScaleYAnimation, forKey: "introView_ScaleY")

		let introAnimationDot3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot3TranslationXAnimation.duration = 0.000
		introAnimationDot3TranslationXAnimation.values = [-90.000] as [Float]
		introAnimationDot3TranslationXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot3TranslationXAnimation.beginTime = beginTime
		introAnimationDot3TranslationXAnimation.fillMode = fillMode
		introAnimationDot3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__root"]?.layer.add(introAnimationDot3TranslationXAnimation, forKey: "introView_TranslationX")

		let introAnimationDot3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot3TranslationYAnimation.duration = 0.000
		introAnimationDot3TranslationYAnimation.values = [-48.072] as [Float]
		introAnimationDot3TranslationYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot3TranslationYAnimation.beginTime = beginTime
		introAnimationDot3TranslationYAnimation.fillMode = fillMode
		introAnimationDot3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__root"]?.layer.add(introAnimationDot3TranslationYAnimation, forKey: "introView_TranslationY")

		let introAnimationDot4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot4ScaleXAnimation.duration = 0.000
		introAnimationDot4ScaleXAnimation.values = [0.880] as [Float]
		introAnimationDot4ScaleXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot4ScaleXAnimation.beginTime = beginTime
		introAnimationDot4ScaleXAnimation.fillMode = fillMode
		introAnimationDot4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__xScale"]?.layer.add(introAnimationDot4ScaleXAnimation, forKey: "introView_ScaleX")

		let introAnimationDot4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot4ScaleYAnimation.duration = 0.000
		introAnimationDot4ScaleYAnimation.values = [0.880] as [Float]
		introAnimationDot4ScaleYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot4ScaleYAnimation.beginTime = beginTime
		introAnimationDot4ScaleYAnimation.fillMode = fillMode
		introAnimationDot4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__yScale"]?.layer.add(introAnimationDot4ScaleYAnimation, forKey: "introView_ScaleY")

		let introAnimationDot4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot4TranslationXAnimation.duration = 0.000
		introAnimationDot4TranslationXAnimation.values = [-78.000] as [Float]
		introAnimationDot4TranslationXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot4TranslationXAnimation.beginTime = beginTime
		introAnimationDot4TranslationXAnimation.fillMode = fillMode
		introAnimationDot4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__root"]?.layer.add(introAnimationDot4TranslationXAnimation, forKey: "introView_TranslationX")

		let introAnimationDot4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot4TranslationYAnimation.duration = 0.000
		introAnimationDot4TranslationYAnimation.values = [-32.000] as [Float]
		introAnimationDot4TranslationYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot4TranslationYAnimation.beginTime = beginTime
		introAnimationDot4TranslationYAnimation.fillMode = fillMode
		introAnimationDot4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__root"]?.layer.add(introAnimationDot4TranslationYAnimation, forKey: "introView_TranslationY")

		let introAnimationDot1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot1ScaleXAnimation.duration = 0.000
		introAnimationDot1ScaleXAnimation.values = [0.750] as [Float]
		introAnimationDot1ScaleXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot1ScaleXAnimation.beginTime = beginTime
		introAnimationDot1ScaleXAnimation.fillMode = fillMode
		introAnimationDot1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__xScale"]?.layer.add(introAnimationDot1ScaleXAnimation, forKey: "introView_ScaleX")

		let introAnimationDot1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot1ScaleYAnimation.duration = 0.000
		introAnimationDot1ScaleYAnimation.values = [0.750] as [Float]
		introAnimationDot1ScaleYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot1ScaleYAnimation.beginTime = beginTime
		introAnimationDot1ScaleYAnimation.fillMode = fillMode
		introAnimationDot1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__yScale"]?.layer.add(introAnimationDot1ScaleYAnimation, forKey: "introView_ScaleY")

		let introAnimationDot1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot1TranslationXAnimation.duration = 0.000
		introAnimationDot1TranslationXAnimation.values = [-111.000] as [Float]
		introAnimationDot1TranslationXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot1TranslationXAnimation.beginTime = beginTime
		introAnimationDot1TranslationXAnimation.fillMode = fillMode
		introAnimationDot1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__root"]?.layer.add(introAnimationDot1TranslationXAnimation, forKey: "introView_TranslationX")

		let introAnimationDot1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot1TranslationYAnimation.duration = 0.000
		introAnimationDot1TranslationYAnimation.values = [-48.000] as [Float]
		introAnimationDot1TranslationYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot1TranslationYAnimation.beginTime = beginTime
		introAnimationDot1TranslationYAnimation.fillMode = fillMode
		introAnimationDot1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__root"]?.layer.add(introAnimationDot1TranslationYAnimation, forKey: "introView_TranslationY")

		let introAnimationDot2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot2ScaleXAnimation.duration = 0.000
		introAnimationDot2ScaleXAnimation.values = [0.750] as [Float]
		introAnimationDot2ScaleXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot2ScaleXAnimation.beginTime = beginTime
		introAnimationDot2ScaleXAnimation.fillMode = fillMode
		introAnimationDot2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__xScale"]?.layer.add(introAnimationDot2ScaleXAnimation, forKey: "introView_ScaleX")

		let introAnimationDot2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot2ScaleYAnimation.duration = 0.000
		introAnimationDot2ScaleYAnimation.values = [0.750] as [Float]
		introAnimationDot2ScaleYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot2ScaleYAnimation.beginTime = beginTime
		introAnimationDot2ScaleYAnimation.fillMode = fillMode
		introAnimationDot2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__yScale"]?.layer.add(introAnimationDot2ScaleYAnimation, forKey: "introView_ScaleY")

		let introAnimationDot2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot2TranslationXAnimation.duration = 0.000
		introAnimationDot2TranslationXAnimation.values = [-101.000] as [Float]
		introAnimationDot2TranslationXAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot2TranslationXAnimation.beginTime = beginTime
		introAnimationDot2TranslationXAnimation.fillMode = fillMode
		introAnimationDot2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__root"]?.layer.add(introAnimationDot2TranslationXAnimation, forKey: "introView_TranslationX")

		let introAnimationDot2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot2TranslationYAnimation.duration = 0.000
		introAnimationDot2TranslationYAnimation.values = [-32.000] as [Float]
		introAnimationDot2TranslationYAnimation.keyTimes = [0.000] as [NSNumber]
		introAnimationDot2TranslationYAnimation.beginTime = beginTime
		introAnimationDot2TranslationYAnimation.fillMode = fillMode
		introAnimationDot2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__root"]?.layer.add(introAnimationDot2TranslationYAnimation, forKey: "introView_TranslationY")
	}

	func removeIntroViewAnimation() {
		self.layer.removeAnimation(forKey: "IntroView")
		self.viewsByName["intro-animation-logo__root"]?.layer.removeAnimation(forKey: "introView_TranslationY")
		self.viewsByName["intro-animation-dot-3__xScale"]?.layer.removeAnimation(forKey: "introView_ScaleX")
		self.viewsByName["intro-animation-dot-3__yScale"]?.layer.removeAnimation(forKey: "introView_ScaleY")
		self.viewsByName["intro-animation-dot-3__root"]?.layer.removeAnimation(forKey: "introView_TranslationX")
		self.viewsByName["intro-animation-dot-3__root"]?.layer.removeAnimation(forKey: "introView_TranslationY")
		self.viewsByName["intro-animation-dot-4__xScale"]?.layer.removeAnimation(forKey: "introView_ScaleX")
		self.viewsByName["intro-animation-dot-4__yScale"]?.layer.removeAnimation(forKey: "introView_ScaleY")
		self.viewsByName["intro-animation-dot-4__root"]?.layer.removeAnimation(forKey: "introView_TranslationX")
		self.viewsByName["intro-animation-dot-4__root"]?.layer.removeAnimation(forKey: "introView_TranslationY")
		self.viewsByName["intro-animation-dot-1__xScale"]?.layer.removeAnimation(forKey: "introView_ScaleX")
		self.viewsByName["intro-animation-dot-1__yScale"]?.layer.removeAnimation(forKey: "introView_ScaleY")
		self.viewsByName["intro-animation-dot-1__root"]?.layer.removeAnimation(forKey: "introView_TranslationX")
		self.viewsByName["intro-animation-dot-1__root"]?.layer.removeAnimation(forKey: "introView_TranslationY")
		self.viewsByName["intro-animation-dot-2__xScale"]?.layer.removeAnimation(forKey: "introView_ScaleX")
		self.viewsByName["intro-animation-dot-2__yScale"]?.layer.removeAnimation(forKey: "introView_ScaleY")
		self.viewsByName["intro-animation-dot-2__root"]?.layer.removeAnimation(forKey: "introView_TranslationX")
		self.viewsByName["intro-animation-dot-2__root"]?.layer.removeAnimation(forKey: "introView_TranslationY")
	}

	// - MARK: loadingAnimation

	func addLoadingAnimation() {
		addLoadingAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addLoadingAnimation(completion: ((Bool) -> Void)?) {
		addLoadingAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addLoadingAnimation(removedOnCompletion: Bool) {
		addLoadingAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addLoadingAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addLoadingAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addLoadingAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "LoadingAnimation")
			self.animationCompletions[layer.animation(forKey: "LoadingAnimation")!] = complete
		}

		let introAnimationDot3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot3ScaleXAnimation.duration = 0.500
		introAnimationDot3ScaleXAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot3ScaleXAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot3ScaleXAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot3ScaleXAnimation.repeatCount = HUGE
		introAnimationDot3ScaleXAnimation.beginTime = beginTime
		introAnimationDot3ScaleXAnimation.fillMode = fillMode
		introAnimationDot3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__xScale"]?.layer.add(introAnimationDot3ScaleXAnimation, forKey: "loadingAnimation_ScaleX")

		let introAnimationDot3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot3ScaleYAnimation.duration = 0.500
		introAnimationDot3ScaleYAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot3ScaleYAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot3ScaleYAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot3ScaleYAnimation.repeatCount = HUGE
		introAnimationDot3ScaleYAnimation.beginTime = beginTime
		introAnimationDot3ScaleYAnimation.fillMode = fillMode
		introAnimationDot3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__yScale"]?.layer.add(introAnimationDot3ScaleYAnimation, forKey: "loadingAnimation_ScaleY")

		let introAnimationDot3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot3TranslationXAnimation.duration = 0.500
		introAnimationDot3TranslationXAnimation.values = [0.000, -16.000, -16.000, 0.000] as [Float]
		introAnimationDot3TranslationXAnimation.keyTimes = [0.000, 0.600, 0.999, 1.000] as [NSNumber]
		introAnimationDot3TranslationXAnimation.timingFunctions = [easeInOutTiming, instantTiming, instantTiming]
		introAnimationDot3TranslationXAnimation.repeatCount = HUGE
		introAnimationDot3TranslationXAnimation.beginTime = beginTime
		introAnimationDot3TranslationXAnimation.fillMode = fillMode
		introAnimationDot3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-3__root"]?.layer.add(introAnimationDot3TranslationXAnimation, forKey: "loadingAnimation_TranslationX")

		let introAnimationDot4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot4ScaleXAnimation.duration = 0.500
		introAnimationDot4ScaleXAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot4ScaleXAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot4ScaleXAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot4ScaleXAnimation.repeatCount = HUGE
		introAnimationDot4ScaleXAnimation.beginTime = beginTime
		introAnimationDot4ScaleXAnimation.fillMode = fillMode
		introAnimationDot4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__xScale"]?.layer.add(introAnimationDot4ScaleXAnimation, forKey: "loadingAnimation_ScaleX")

		let introAnimationDot4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot4ScaleYAnimation.duration = 0.500
		introAnimationDot4ScaleYAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot4ScaleYAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot4ScaleYAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot4ScaleYAnimation.repeatCount = HUGE
		introAnimationDot4ScaleYAnimation.beginTime = beginTime
		introAnimationDot4ScaleYAnimation.fillMode = fillMode
		introAnimationDot4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__yScale"]?.layer.add(introAnimationDot4ScaleYAnimation, forKey: "loadingAnimation_ScaleY")

		let introAnimationDot4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot4TranslationYAnimation.duration = 0.500
		introAnimationDot4TranslationYAnimation.values = [0.000, 16.000, 16.000] as [Float]
		introAnimationDot4TranslationYAnimation.keyTimes = [0.000, 0.600, 1.000] as [NSNumber]
		introAnimationDot4TranslationYAnimation.timingFunctions = [easeInOutTiming, linearTiming]
		introAnimationDot4TranslationYAnimation.repeatCount = HUGE
		introAnimationDot4TranslationYAnimation.beginTime = beginTime
		introAnimationDot4TranslationYAnimation.fillMode = fillMode
		introAnimationDot4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-4__root"]?.layer.add(introAnimationDot4TranslationYAnimation, forKey: "loadingAnimation_TranslationY")

		let introAnimationDot1ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot1ScaleXAnimation.duration = 0.500
		introAnimationDot1ScaleXAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot1ScaleXAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot1ScaleXAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot1ScaleXAnimation.repeatCount = HUGE
		introAnimationDot1ScaleXAnimation.beginTime = beginTime
		introAnimationDot1ScaleXAnimation.fillMode = fillMode
		introAnimationDot1ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__xScale"]?.layer.add(introAnimationDot1ScaleXAnimation, forKey: "loadingAnimation_ScaleX")

		let introAnimationDot1ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot1ScaleYAnimation.duration = 0.500
		introAnimationDot1ScaleYAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot1ScaleYAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot1ScaleYAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot1ScaleYAnimation.repeatCount = HUGE
		introAnimationDot1ScaleYAnimation.beginTime = beginTime
		introAnimationDot1ScaleYAnimation.fillMode = fillMode
		introAnimationDot1ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__yScale"]?.layer.add(introAnimationDot1ScaleYAnimation, forKey: "loadingAnimation_ScaleY")

		let introAnimationDot1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		introAnimationDot1TranslationYAnimation.duration = 0.500
		introAnimationDot1TranslationYAnimation.values = [0.000, -16.000, -16.000, 0.000] as [Float]
		introAnimationDot1TranslationYAnimation.keyTimes = [0.000, 0.600, 0.999, 1.000] as [NSNumber]
		introAnimationDot1TranslationYAnimation.timingFunctions = [easeInOutTiming, instantTiming, instantTiming]
		introAnimationDot1TranslationYAnimation.repeatCount = HUGE
		introAnimationDot1TranslationYAnimation.beginTime = beginTime
		introAnimationDot1TranslationYAnimation.fillMode = fillMode
		introAnimationDot1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-1__root"]?.layer.add(introAnimationDot1TranslationYAnimation, forKey: "loadingAnimation_TranslationY")

		let introAnimationDot2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		introAnimationDot2ScaleXAnimation.duration = 0.500
		introAnimationDot2ScaleXAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot2ScaleXAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot2ScaleXAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot2ScaleXAnimation.repeatCount = HUGE
		introAnimationDot2ScaleXAnimation.beginTime = beginTime
		introAnimationDot2ScaleXAnimation.fillMode = fillMode
		introAnimationDot2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__xScale"]?.layer.add(introAnimationDot2ScaleXAnimation, forKey: "loadingAnimation_ScaleX")

		let introAnimationDot2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		introAnimationDot2ScaleYAnimation.duration = 0.500
		introAnimationDot2ScaleYAnimation.values = [1.000, 0.600, 1.000, 1.000] as [Float]
		introAnimationDot2ScaleYAnimation.keyTimes = [0.000, 0.300, 0.600, 1.000] as [NSNumber]
		introAnimationDot2ScaleYAnimation.timingFunctions = [easeInTiming, easeOutTiming, linearTiming]
		introAnimationDot2ScaleYAnimation.repeatCount = HUGE
		introAnimationDot2ScaleYAnimation.beginTime = beginTime
		introAnimationDot2ScaleYAnimation.fillMode = fillMode
		introAnimationDot2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__yScale"]?.layer.add(introAnimationDot2ScaleYAnimation, forKey: "loadingAnimation_ScaleY")

		let introAnimationDot2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		introAnimationDot2TranslationXAnimation.duration = 0.500
		introAnimationDot2TranslationXAnimation.values = [0.000, 16.000, 16.000, 0.000] as [Float]
		introAnimationDot2TranslationXAnimation.keyTimes = [0.000, 0.600, 0.999, 1.000] as [NSNumber]
		introAnimationDot2TranslationXAnimation.timingFunctions = [easeInOutTiming, instantTiming, instantTiming]
		introAnimationDot2TranslationXAnimation.repeatCount = HUGE
		introAnimationDot2TranslationXAnimation.beginTime = beginTime
		introAnimationDot2TranslationXAnimation.fillMode = fillMode
		introAnimationDot2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["intro-animation-dot-2__root"]?.layer.add(introAnimationDot2TranslationXAnimation, forKey: "loadingAnimation_TranslationX")
	}

	func removeLoadingAnimation() {
		self.layer.removeAnimation(forKey: "LoadingAnimation")
		self.viewsByName["intro-animation-dot-3__xScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-3__yScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-3__root"]?.layer.removeAnimation(forKey: "loadingAnimation_TranslationX")
		self.viewsByName["intro-animation-dot-4__xScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-4__yScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-4__root"]?.layer.removeAnimation(forKey: "loadingAnimation_TranslationY")
		self.viewsByName["intro-animation-dot-1__xScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-1__yScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-1__root"]?.layer.removeAnimation(forKey: "loadingAnimation_TranslationY")
		self.viewsByName["intro-animation-dot-2__xScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleX")
		self.viewsByName["intro-animation-dot-2__yScale"]?.layer.removeAnimation(forKey: "loadingAnimation_ScaleY")
		self.viewsByName["intro-animation-dot-2__root"]?.layer.removeAnimation(forKey: "loadingAnimation_TranslationX")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "IntroView")
		self.layer.removeAnimation(forKey: "IntroAnimation")
		self.layer.removeAnimation(forKey: "LoadingAnimation")
	}
}
